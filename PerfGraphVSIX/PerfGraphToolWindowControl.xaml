<UserControl x:Class="PerfGraphVSIX.PerfGraphToolWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:local="clr-namespace:PerfGraphVSIX"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="600"
             Name="MyToolWindow" DataContext="{Binding Mode=OneWay, RelativeSource={RelativeSource Self}}">
    <UserControl.Resources>
        <ResourceDictionary xmlns:vs_shell="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0">
            <Style TargetType="Label">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
            </Style>
            <Style TargetType="ListBox">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"/>
            </Style>
            <Style TargetType="CheckBox">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
            </Style>
            <Style TargetType="Button">
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowButtonInactiveBorderBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ButtonTextBrushKey}}" />
            </Style>

            <Style TargetType="TabItem">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"/>
            </Style>
            <Style TargetType="TabControl">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"/>
            </Style>
            <Style TargetType="UserControl">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"/>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <!--<Grid>
        <local:PerfGraph x:Name="perfGraph"></local:PerfGraph>
    </Grid>-->

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height = "*"/>
            <RowDefinition Height = "5"/>
            <RowDefinition Height = "*"/>
        </Grid.RowDefinitions>
        <TabControl Name="tabControl" Grid.Row="0">
            <TabItem Header="Code Samples">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="5"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <StackPanel x:Name="spCodeSamples" Grid.Column="0">
                    </StackPanel>
                    <GridSplitter Grid.Column="1" Width="5" VerticalAlignment="Stretch"/>
                    <Grid Grid.Column = "2">
                        <TextBox Height="20" VerticalAlignment="Top" ToolTipService.ShowDuration="40000">
                            https://devdiv.visualstudio.com/DevDiv/_wiki/wikis/DevDiv.wiki/3829/Show-VS-memory-use-in-a-graph-PerfGraphVSIX
                            <TextBox.ToolTip>
                                <ToolTip xml:space="preserve">
These are some code samples that you can modify/run. (extensions to this extension!)
Navigate the tree to edit/view a sample (dbl-click) or run (the ExecCode button below or Ctrl-Enter)
The most recently modified one is automatically selected.
Each item's tooltip content is the result of parsing the '//Desc:' lines in the file
The LeakDemos and VSLeakTests include samples of leaking code. The code is iterated automatically and dumps are taken near the end and at the end. 
  The 2 dumps are compared to identify the types leaked. Run one, and it shows a graph of leaking memory while running.
  At the end of the iterations a Txt file is opened showing the leaking types, 
  The LeakDemos show detecting certain kinds of leaks, such as WPF Event Handlers or Cancellation Token Source.
  The VSLeakTests automate another instance of VS e.g. repeatedly opening/closing a solution, debug, etc
  and ClrObjectExplorer is opened with the final dump, so you can filter to the desired type and see it's references/GCRoots
The VSDemos include samples of how to do various tasks in the VS process: 
    a Telemetry Monitor, Child Process Monitor, ThreadPool Starvation demo, CodeMarker
The ClrObjExplorer button will: take a dump of the current instance of VS and open it in ClrObjectExplorer.
This allows you to examine the current VS instance to see how many instances of your type are in memory and how they are referenced.
To learn how to add your own, see VSDemos/Simple.cs

                                </ToolTip>
                            </TextBox.ToolTip>
                        </TextBox>
                    </Grid>
                </Grid>
            </TabItem>
            <TabItem Header="Graph">
                <StackPanel Orientation="Vertical" Name = "spGraph">
                    <WindowsFormsHost Name="wfhost"/>
                </StackPanel>
            </TabItem>
            <TabItem Header = "TextViewTracker" ToolTip="Track Editor TextView instances via ITextViewCreationListener">
                <StackPanel Orientation="Vertical">
                    <Label Content="Opened TextViews" ToolTip="Views that are currently opened. (Refreshed by UpdateInterval, which does GC)"/>
                    <ListBox ItemsSource="{Binding OpenedViews}" MaxHeight = "400"/>
                    <Label Content="Leaked TextViews" ToolTip="Each row is a views that has ITextView.IsClosed==true, but is still in memory (Refreshed by UpdateInterval, which does GC). Thanks to David Pugh"/>
                    <ListBox ItemsSource="{Binding LeakedViews}" MaxHeight = "400"/>
                </StackPanel>
            </TabItem>
            <TabItem Header = "ObjectTracker" ToolTip="Track various Object instances">
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal">
                        <Button Name="btnClearObjects" Content="Clear tracked objects" ToolTip="Clear the list of objects being tracked. The objects will not be tracked: but they may still be in memory"/>
                        <Label Content="Filter"/>
                        <local:MyTextBox Text="{Binding ObjectTrackerFilter}" Width="146"
                    ToolTip="Filter to include only these items below. Applied every Update(Tab out to apply). (See UpdateInterval on Options Tab). Regex (ignores case) like '.*proj.*'  Negative: All without 'text': '^((?!text).)*$'"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="{Binding CntCreatedObjs}" ToolTip="Objs that are currently in memory. These could be leaks (Refreshed by UpdateInterval, which does GC). Order By Count descending"/>
                    </StackPanel>
                    <ListBox ItemsSource="{Binding CreatedObjs}" MaxHeight = "400"/>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="{Binding CntLeakedObjs}" ToolTip="Objects that have Objects.IsClosed or *disposed* ==true, but are still in memory. If these accumulate, likely to be a leak. (Refreshed by UpdateInterval, which does GC)."/>
                    </StackPanel>
                    <UserControl Name="BrowLeakedObjects"/>
                </StackPanel>
            </TabItem>
            <TabItem x:Name="inProcLeakTracerTabItem" Visibility="Collapsed" Header = "MemoryLeakService Tracker" ToolTip="Track Object instances using the IMemoryLeakTrackerServices for objects that support it. The objects claimed to leak here are probable leaks as per the developers of those object.">
                <UserControl x:Name="inProcLeakTracker"/>
            </TabItem>
            <TabItem Header = "Options" ToolTip="Choose options">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Orientation = "Vertical" Grid.Column="0">
                        <StackPanel Orientation="Horizontal">
                            <Label Content="Update Interval"/>
                            <local:MyTextBox x:Name ="txtUpdateInterval" Width="90" ToolTip="Update graph in MilliSeconds. Every sample does a Tools.ForceGC. Set to 0 for manual sample only" Text="{Binding UpdateInterval}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Label Content="# Data Points in graph"/>
                            <local:MyTextBox Text="{Binding NumDataPoints}" Width="90" ToolTip="Number of Data points (x axis). Will change on next Reset"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Content="DoFullGC Per Sample" IsChecked="{Binding DoFullGCPerSample}" 
                                      ToolTip="When taking a measurement sample, do a complete GC. This is should be set only for leak tests. Full GC causes UI Delays"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Content="TrackTextViews" IsChecked="{Binding TrackTextViews}" ToolTip="Listen for TextView Creation Events and track them"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Content="TrackTextBuffers" IsChecked="{Binding TrackTextBuffers}" ToolTip="Listen for TextBuffer (and ProjectionBuffer) Creation Events and track them"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Content="Track Project Objects" IsChecked="{Binding TrackProjectObjects}" ToolTip="Listen for Project Creation Events and track them. Currently wors for CPS and C++"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Content="Track Contained Objects" IsChecked="{Binding TrackContainedObjects}" 
                        ToolTip="For Textviews, delve into propertybag to find subscribers to EditOptions and track those. For Projects, delve..."/>
                        </StackPanel>
                        <!--<StackPanel Orientation="Horizontal">
                            <Label Content="Number of Iterations"/>
                            <local:MyTextBox Width="90" ToolTip="# of iterations" Text="{Binding NumberOfIterations}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Label Content="Delay Multiplier"/>
                            <local:MyTextBox Width="90" ToolTip="defaults to 1." Text="{Binding DelayMultiplier}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Label Content="Solution To Load"/>
                            <local:MyTextBox ToolTip="Solution to load" Text="{Binding SolutionToLoad}"/>
                        </StackPanel>-->
                    </StackPanel>
                    <StackPanel Grid.Column="1">
                        <Label Content="Counters to track:"/>
                        <ListBox Name="lbPCounters" SelectionMode="Extended" Width="160" MaxHeight = "200" VerticalAlignment="Top" ToolTip="Multiselect various Performance Counters to graph" />
                    </StackPanel>
                    <StackPanel Grid.Column="2">
                        <Label Content="AutoDumpCollection">
                            <Label.ToolTip>
                                <ToolTip xml:space="preserve">
                                    
Sometimes VS emmory use is spikey. To catch a dump of a spike automatically, select a single Counter to track and set UpdateInterval to non-zero.
e.g. select ProcessorVirtualBytes and threshold to be 3000000000 to get a dump when the measurement goes above 3Gigs.
You can also get a dump when e.g. the ThreadCount > 10
You can monitor the graph on the Graph tab
When selected counter goes above threshold, will create a dump, then self disable. Requires UpdateInterval to be non-zero
To get another dump, re-enable
                                </ToolTip>
                            </Label.ToolTip>
                        </Label>
                        <CheckBox Content="Enabled" IsChecked="{Binding AutoDumpIsEnabled}"/>
                        <StackPanel Orientation="Horizontal">
                            <Label Content="Threshold"/>
                            <TextBox Width="100" Text="{Binding AutoDumpThresh}" ToolTip="integer threshold to collect a dump, like # of bytes or # of threads"/>
                        </StackPanel>
                    </StackPanel>
                </Grid>
            </TabItem>
        </TabControl>
        <GridSplitter Grid.Row="1" Height="5" HorizontalAlignment="Stretch"/>
        <StackPanel Grid.Row="2" Orientation="Vertical">
            <StackPanel Orientation="Horizontal">
                <Button Name="btnDoSample" Content="TakeSample" Height="20" VerticalAlignment="Top" 
                        ToolTip="Take a Measurement to graph, which also does a Tools.ForceGC (Ctrl-Alt-Shift-F12 twice) (automatic on every sample, so click this if your sample time is very long)&#x0a;Also updates trackers on other tabs"  
                         />
                <Button x:Name="btnExecCode" Content="ExecCode" Height="20" VerticalAlignment="Top" 
                        ToolTip="Execute the code file selected in the Options Tab Code samples. This code typically iterates a scenario. (If running, cancel the execution)" Click="BtnExecCode_Click" Margin="10,0,0,0"
                         />
                <Button x:Name="btnClrObjExplorer" Content="ClrObjExplorer" Height="20" VerticalAlignment="Top" 
                        ToolTip="Create a dump of the current VS process and start the ClrObjExplorer process to examine it" Click="BtnClrObjExplorer_Click" Margin="10,0,0,0"
                         />
                <TextBox Name="txtLastStatMsg" Text="{Binding LastStatMsg}" Width="500" Height="20" VerticalAlignment="Top" HorizontalAlignment="Left" FontFamily="{Binding FontFamilyMono}"/>
            </StackPanel>
            <TextBox Name="txtStatus" Height="200" MaxHeight="200" IsReadOnly="true" IsUndoEnabled="false" FontSize="10" 
            HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" HorizontalContentAlignment="Left" FontFamily="{Binding FontFamilyMono}"/>
        </StackPanel>
    </Grid>


</UserControl>
