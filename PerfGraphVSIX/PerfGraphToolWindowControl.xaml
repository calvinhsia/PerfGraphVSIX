<UserControl x:Class="PerfGraphVSIX.PerfGraphToolWindowControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vsshell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
             xmlns:local="clr-namespace:PerfGraphVSIX"
             mc:Ignorable="d"
             d:DesignHeight="300" d:DesignWidth="600"
             Name="MyToolWindow" DataContext="{Binding Mode=OneWay, RelativeSource={RelativeSource Self}}">
    <UserControl.Resources>
        <ResourceDictionary xmlns:vs_shell="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0">
            <Style TargetType="Label">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
            </Style>
            <Style TargetType="TextBox">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
            </Style>
            <Style TargetType="TextBlock">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
            </Style>
            <Style TargetType="ListBox">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"/>
            </Style>
            <Style TargetType="CheckBox">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowTextBrushKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowBackgroundBrushKey}}"/>
            </Style>
            <Style TargetType="Button">
                <Setter Property="Background" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ToolWindowButtonInactiveBorderBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vs_shell:EnvironmentColors.ButtonTextBrushKey}}" />
            </Style>

            <Style TargetType="TabItem">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"/>
            </Style>
            <Style TargetType="TabControl">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"/>
            </Style>
            <Style TargetType="UserControl">
                <Setter Property="Foreground" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowTextKey}}"/>
                <Setter Property="Background" Value="{DynamicResource {x:Static vsshell:VsBrushes.WindowKey}}"/>
            </Style>
        </ResourceDictionary>
    </UserControl.Resources>
    <!--<Grid>
        <local:PerfGraph x:Name="perfGraph"></local:PerfGraph>
    </Grid>-->

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height = "*"/>
            <RowDefinition Height = "5"/>
            <RowDefinition Height = "*"/>
        </Grid.RowDefinitions>
        <TabControl Name="tabControl" Grid.Row="0">
            <TabItem Header="Graph">
                <StackPanel Orientation="Vertical" Name = "spGraph">
                    <WindowsFormsHost Name="wfhost"/>
                </StackPanel>
            </TabItem>
            <TabItem Header = "TextViewTracker" ToolTip="Track Editor TextView instances">
                <StackPanel Orientation="Vertical">
                    <Label Content="Opened TextViews" ToolTip="Views that are currently opened. (Refreshed by UpdateInterval, which does GC)"/>
                    <ListBox ItemsSource="{Binding OpenedViews}" MaxHeight = "400"/>
                    <Label Content="Leaked TextViews" ToolTip="Views that have ITextView.IsClosed==true, but still in memory (Refreshed by UpdateInterval, which does GC). Thanks to David Pugh"/>
                    <ListBox ItemsSource="{Binding LeakedViews}" MaxHeight = "400"/>
                </StackPanel>
            </TabItem>
            <TabItem Header = "ObjectTracker" ToolTip="Track Object instances">
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal">
                        <Button Name="btnClearObjects" Content="Clear tracked objects" ToolTip="Clear the list of objects being tracked. The objects will not be tracked: but they may still be in memory"/>
                        <Label Content="Filter"/>
                        <local:MyTextBox Text="{Binding ObjectTrackerFilter}" Width="146"
                    ToolTip="Filter to include only these items below. Applied every Update(Tab out to apply). (See UpdateInterval on Options Tab). Regex (ignores case) like '.*proj.*'  Negative: All without 'text': '^((?!text).)*$'"/>
                    </StackPanel>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="{Binding CntCreatedObjs}" ToolTip="Objs that are currently in memory. These could be leaks (Refreshed by UpdateInterval, which does GC). Order By Count descending"/>
                    </StackPanel>
                    <ListBox ItemsSource="{Binding CreatedObjs}" MaxHeight = "400"/>
                    <StackPanel Orientation="Horizontal">
                        <Label Content="{Binding CntLeakedObjs}" ToolTip="Objects that have Objects.IsClosed or *disposed* ==true, but are still in memory. If these accumulate, likely to be a leak. (Refreshed by UpdateInterval, which does GC)."/>
                    </StackPanel>
                    <UserControl Name="BrowLeakedObjects"/>
                </StackPanel>
            </TabItem>
            <TabItem Header = "Options" ToolTip="{Binding TipString}">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                        <ColumnDefinition/>
                    </Grid.ColumnDefinitions>
                    <StackPanel Orientation = "Vertical" Grid.Column="0">
                        <StackPanel Orientation="Horizontal">
                            <Label Content="Update Interval"/>
                            <local:MyTextBox x:Name ="txtUpdateInterval" Width="90" ToolTip="Update graph in MilliSeconds. Every sample does a Tools.ForceGC. Set to 0 for manual sample only" Text="{Binding UpdateInterval}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Label Content="# Data Points in graph"/>
                            <local:MyTextBox Text="{Binding NumDataPoints}" Width="90" ToolTip="Number of Data points (x axis). Will change on next Reset"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Name="chkShowStatusHistory" Content="Show Status History" IsChecked="True" ToolTip="Show a textbox which accumulates history of samples"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Content="TrackTextViews" IsChecked="{Binding TrackTextViews}" ToolTip="Listen for TextView Creation Events and track them"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Content="TrackTextBuffers" IsChecked="{Binding TrackTextBuffers}" ToolTip="Listen for TextBuffer (and ProjectionBuffer) Creation Events and track them"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Content="Track Project Objects" IsChecked="{Binding TrackProjectObjects}" ToolTip="Listen for Project Creation Events and track them. Currently wors for CPS and C++"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <CheckBox Content="Track Contained Objects" IsChecked="{Binding TrackContainedObjects}" 
                        ToolTip="For Textviews, delve into propertybag to find subscribers to EditOptions and track those. For Projects, delve..."/>
                        </StackPanel>
                        <!--<StackPanel Orientation="Horizontal">
                            <Label Content="Number of Iterations"/>
                            <local:MyTextBox Width="90" ToolTip="# of iterations" Text="{Binding NumberOfIterations}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Label Content="Delay Multiplier"/>
                            <local:MyTextBox Width="90" ToolTip="defaults to 1." Text="{Binding DelayMultiplier}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <Label Content="Solution To Load"/>
                            <local:MyTextBox ToolTip="Solution to load" Text="{Binding SolutionToLoad}"/>
                        </StackPanel>-->
                    </StackPanel>
                    <StackPanel Grid.Column="1">
                        <Label Content="Counters to track:"/>
                        <ListBox Name="lbPCounters" SelectionMode="Extended" Width="160" MaxHeight = "300" VerticalAlignment="Top" ToolTip="Multiselect various counters" />
                    </StackPanel>
                    <StackPanel Grid.Column="2">
                        <Label Content="Code Samples:"/>
                        <ListBox Name="lvCodeSamples" 
                                 ToolTip="Dbl-click a code sample to open in editor. The selected one will be run with the 'ExecCode' button. Create new files in the same folder for more tests. These are sorted by LastWriteTime and the 1st one is selected when the directory changes content."
                                 ItemsSource="{Binding LstCodeSamples }" 
                                 MaxHeight="200"
                                 MouseDoubleClick="LvCodeSamples_MouseDoubleClick"/>
                    </StackPanel>
                </Grid>
            </TabItem>
        </TabControl>
        <GridSplitter Grid.Row="1" Height="5" HorizontalAlignment="Stretch"/>
        <StackPanel Grid.Row="2" Orientation="Vertical">
            <StackPanel Orientation="Horizontal">
                <Button Name="btnDoSample" Content="TakeSample" Height="20" VerticalAlignment="Top" 
                        ToolTip="Take a Sample, which also does a Tools.ForceGC (Ctrl-Alt-Shift-F12 twice) (automatic on every sample, so click this if your sample time is very long)"  
                         />
                <Button x:Name="btnExecCode" Content="ExecCode" Height="20" VerticalAlignment="Top" 
                        ToolTip="Execute the code file selected in the Options Tab Code samples. This code typically iterates a scenario. (If running, cancel the execution)" Click="BtnExecCode_Click" Margin="10,0,0,0"
                         />
                <Button x:Name="btnClrObjExplorer" Content="ClrObjExplorer" Height="20" VerticalAlignment="Top" 
                        ToolTip="Create a dump and start the ClrObjectExplorer process to examine it" Click="BtnClrObjExplorer_Click" Margin="10,0,0,0"
                         />
                <TextBox Name="txtLastStatMsg" Text="{Binding LastStatMsg}" Width="500" Height="20" VerticalAlignment="Top" HorizontalAlignment="Left" FontFamily="{Binding FontFamilyMono}"/>
            </StackPanel>
            <TextBox Name="txtStatus" Height="200" MaxHeight="200" IsReadOnly="true" IsUndoEnabled="false" FontSize="10" 
            HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto" VerticalAlignment="Top" HorizontalContentAlignment="Left" FontFamily="{Binding FontFamilyMono}"/>
        </StackPanel>
    </Grid>


</UserControl>
